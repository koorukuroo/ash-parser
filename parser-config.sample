trainingSteps = 2000
learningRate = 0.007        # Adam works well with 0.005 or 0.001, RMSProp works well with 0.01 (kind of)
batchSize = 500
topK = 10                   # How many predictions to consider (could be increased to # of actions, supposedly...? may just want to set it that way from the beginning)

# 256,256 seems to have a slight advantage compared to 128,128, at least in the beginning...
hiddenLayerSizes = [256, 256]

embeddingSizes = {'tag': 32, 'label': 32, 'word': 64}

# same as Parsey McParseface
# https://github.com/tensorflow/models/blob/master/syntaxnet/syntaxnet/models/parsey_mcparseface/context.pbtxt
featureStrings = [
    'stack.child(1).label',
    'stack.child(1).sibling(-1).label',
    'stack.child(-1).label',
    'stack.child(-1).sibling(1).label',
    'stack.child(2).label',
    'stack.child(-2).label',
    'stack(1).child(1).label',
    'stack(1).child(1).sibling(-1).label',
    'stack(1).child(-1).label',
    'stack(1).child(-1).sibling(1).label',
    'stack(1).child(2).label',
    'stack(1).child(-2).label',
    'input.tag',
    'input(1).tag',
    'input(2).tag',
    'input(3).tag',
    'stack.tag',
    'stack.child(1).tag',
    'stack.child(1).sibling(-1).tag',
    'stack.child(-1).tag',
    'stack.child(-1).sibling(1).tag',
    'stack.child(2).tag',
    'stack.child(-2).tag',
    'stack(1).tag',
    'stack(1).child(1).tag',
    'stack(1).child(1).sibling(-1).tag',
    'stack(1).child(-1).tag',
    'stack(1).child(-1).sibling(1).tag',
    'stack(1).child(2).tag',
    'stack(1).child(-2).tag',
    'stack(2).tag',
    'stack(3).tag',
    'input.word',
    'input(1).word',
    'input(2).word',
    'input(3).word',
    'stack.word',
    'stack.child(1).word',
    'stack.child(1).sibling(-1).word',
    'stack.child(-1).word',
    'stack.child(-1).sibling(1).word',
    'stack.child(2).word',
    'stack.child(-2).word',
    'stack(1).word',
    'stack(1).child(1).word',
    'stack(1).child(1).sibling(-1).word',
    'stack(1).child(-1).word',
    'stack(1).child(-1).sibling(1).word',
    'stack(1).child(2).word',
    'stack(1).child(-2).word',
    'stack(2).word',
    'stack(3).word'
]
